export function isFn(d: any): boolean;
export type CurrentUser = import("@onflow/typedefs").CurrentUser;
export type CompositeSignature = import("@onflow/typedefs").CompositeSignature;
/**
 * - Current User Configuration
 */
export type CurrentUserConfig = {
    /**
     * - Platform
     */
    platform: string;
    /**
     * - FCL Discovery Configuration
     */
    discovery?: object | undefined;
    /**
     * - Storage Provider Getter
     */
    getStorageProvider?: (() => Promise<import("../utils/storage").StorageProvider>) | undefined;
};
/**
 * @typedef {object} CurrentUserConfig - Current User Configuration
 * @property {string} platform - Platform
 * @property {object} [discovery] - FCL Discovery Configuration
 * @property {() => Promise<import("../utils/storage").StorageProvider>} [getStorageProvider] - Storage Provider Getter
 */
/**
 * @description
 * Creates the Current User object
 *
 * @param {CurrentUserConfig} config - Current User Configuration
 *  */
export function getCurrentUser(config: CurrentUserConfig): (() => {
    authenticate: ({ service, redir }?: {
        service?: object | undefined;
        redir?: boolean | undefined;
    } | undefined) => Promise<any>;
    unauthenticate: () => void;
    authorization: (account: object) => Promise<object>;
    signUserMessage: (msg: string) => Promise<CompositeSignature[]>;
    subscribe: (callback: Function) => Function;
    snapshot: () => Promise<CurrentUser>;
    resolveArgument: () => Promise<import("@onflow/sdk").CadenceArgument<t.TypeDescriptor<string, {
        type: string;
        value: string;
    }>>>;
}) & {
    authenticate: ({ service, redir }?: {
        service?: object | undefined;
        redir?: boolean | undefined;
    } | undefined) => Promise<any>;
    unauthenticate: () => void;
    authorization: (account: object) => Promise<object>;
    signUserMessage: (msg: string) => Promise<CompositeSignature[]>;
    subscribe: (callback: Function) => Function;
    snapshot: () => Promise<CurrentUser>;
    resolveArgument: () => Promise<import("@onflow/sdk").CadenceArgument<t.TypeDescriptor<string, {
        type: string;
        value: string;
    }>>>;
};
import * as t from "@onflow/types";
