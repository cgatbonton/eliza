"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HermesClient = void 0;
const eventsource_1 = __importDefault(require("eventsource"));
const zodSchemas_1 = require("./zodSchemas");
const utils_1 = require("./utils");
const DEFAULT_TIMEOUT = 5000;
const DEFAULT_HTTP_RETRIES = 3;
class HermesClient {
    baseURL;
    timeout;
    httpRetries;
    headers;
    /**
     * Constructs a new Connection.
     *
     * @param endpoint endpoint URL to the price service. Example: https://website/example/
     * @param config Optional HermesClientConfig for custom configurations.
     */
    constructor(endpoint, config) {
        this.baseURL = endpoint;
        this.timeout = config?.timeout ?? DEFAULT_TIMEOUT;
        this.httpRetries = config?.httpRetries ?? DEFAULT_HTTP_RETRIES;
        this.headers = config?.headers ?? {};
    }
    async httpRequest(url, schema, options, retries = this.httpRetries, backoff = 100 + Math.floor(Math.random() * 100), // Adding randomness to the initial backoff to avoid "thundering herd" scenario where a lot of clients that get kicked off all at the same time (say some script or something) and fail to connect all retry at exactly the same time too
    externalAbortController) {
        const controller = externalAbortController ?? new AbortController();
        const { signal } = controller;
        options = {
            ...options,
            signal,
            headers: { ...this.headers, ...options?.headers },
        }; // Merge any existing options with the signal and headers
        // Set a timeout to abort the request if it takes too long
        const timeout = setTimeout(() => controller.abort(), this.timeout);
        try {
            const response = await fetch(url, options);
            clearTimeout(timeout); // Clear the timeout if the request completes in time
            if (!response.ok) {
                const errorBody = await response.text();
                throw new Error(`HTTP error! status: ${response.status}${errorBody ? `, body: ${errorBody}` : ""}`);
            }
            const data = await response.json();
            return schema.parse(data);
        }
        catch (error) {
            clearTimeout(timeout);
            if (retries > 0 &&
                !(error instanceof Error && error.name === "AbortError")) {
                // Wait for a backoff period before retrying
                await new Promise((resolve) => setTimeout(resolve, backoff));
                return this.httpRequest(url, schema, options, retries - 1, backoff * 2); // Exponential backoff
            }
            throw error;
        }
    }
    /**
     * Fetch the set of available price feeds.
     * This endpoint can be filtered by asset type and query string.
     * This will throw an error if there is a network problem or the price service returns a non-ok response.
     *
     * @param options Optional parameters:
     *        - query: String to filter the price feeds. If provided, the results will be filtered to all price feeds whose symbol contains the query string. Query string is case insensitive. Example: "bitcoin".
     *        - filter: String to filter the price feeds by asset type. Possible values are "crypto", "equity", "fx", "metal", "rates". Filter string is case insensitive.
     *
     * @returns Array of PriceFeedMetadata objects.
     */
    async getPriceFeeds(options) {
        const url = new URL("v2/price_feeds", this.baseURL);
        if (options) {
            this.appendUrlSearchParams(url, options);
        }
        return await this.httpRequest(url.toString(), zodSchemas_1.schemas.PriceFeedMetadata.array());
    }
    /**
     * Fetch the latest publisher stake caps.
     * This endpoint can be customized by specifying the encoding type and whether the results should also return the parsed publisher caps.
     * This will throw an error if there is a network problem or the price service returns a non-ok response.
     *
     * @param options Optional parameters:
     *        - encoding: Encoding type. If specified, return the publisher caps in the encoding specified by the encoding parameter. Default is hex.
     *        - parsed: Boolean to specify if the parsed publisher caps should be included in the response. Default is false.
     *
     * @returns PublisherCaps object containing the latest publisher stake caps.
     */
    async getLatestPublisherCaps(options) {
        const url = new URL("v2/updates/publisher_stake_caps/latest", this.baseURL);
        if (options) {
            this.appendUrlSearchParams(url, options);
        }
        return await this.httpRequest(url.toString(), zodSchemas_1.schemas.LatestPublisherStakeCapsUpdateDataResponse);
    }
    /**
     * Fetch the latest price updates for a set of price feed IDs.
     * This endpoint can be customized by specifying the encoding type and whether the results should also return the parsed price update using the options object.
     * This will throw an error if there is a network problem or the price service returns a non-ok response.
     *
     * @param ids Array of hex-encoded price feed IDs for which updates are requested.
     * @param options Optional parameters:
     *        - encoding: Encoding type. If specified, return the price update in the encoding specified by the encoding parameter. Default is hex.
     *        - parsed: Boolean to specify if the parsed price update should be included in the response. Default is false.
     *        - ignoreInvalidPriceIds: Boolean to specify if invalid price IDs should be ignored instead of returning an error. Default is false.
     *
     * @returns PriceUpdate object containing the latest updates.
     */
    async getLatestPriceUpdates(ids, options) {
        const url = new URL("v2/updates/price/latest", this.baseURL);
        for (const id of ids) {
            url.searchParams.append("ids[]", id);
        }
        if (options) {
            const transformedOptions = (0, utils_1.camelToSnakeCaseObject)(options);
            this.appendUrlSearchParams(url, transformedOptions);
        }
        return this.httpRequest(url.toString(), zodSchemas_1.schemas.PriceUpdate);
    }
    /**
     * Fetch the price updates for a set of price feed IDs at a given timestamp.
     * This endpoint can be customized by specifying the encoding type and whether the results should also return the parsed price update.
     * This will throw an error if there is a network problem or the price service returns a non-ok response.
     *
     * @param publishTime Unix timestamp in seconds.
     * @param ids Array of hex-encoded price feed IDs for which updates are requested.
     * @param options Optional parameters:
     *        - encoding: Encoding type. If specified, return the price update in the encoding specified by the encoding parameter. Default is hex.
     *        - parsed: Boolean to specify if the parsed price update should be included in the response. Default is false.
     *        - ignoreInvalidPriceIds: Boolean to specify if invalid price IDs should be ignored instead of returning an error. Default is false.
     *
     * @returns PriceUpdate object containing the updates at the specified timestamp.
     */
    async getPriceUpdatesAtTimestamp(publishTime, ids, options) {
        const url = new URL(`v2/updates/price/${publishTime}`, this.baseURL);
        for (const id of ids) {
            url.searchParams.append("ids[]", id);
        }
        if (options) {
            const transformedOptions = (0, utils_1.camelToSnakeCaseObject)(options);
            this.appendUrlSearchParams(url, transformedOptions);
        }
        return this.httpRequest(url.toString(), zodSchemas_1.schemas.PriceUpdate);
    }
    /**
     * Fetch streaming price updates for a set of price feed IDs.
     * This endpoint can be customized by specifying the encoding type, whether the results should include parsed updates,
     * and if unordered updates or only benchmark updates are allowed.
     * This will return an EventSource that can be used to listen to streaming updates.
     * If an invalid hex-encoded ID is passed, it will throw an error.
     *
     * @param ids Array of hex-encoded price feed IDs for which streaming updates are requested.
     * @param options Optional parameters:
     *        - encoding: Encoding type. If specified, updates are returned in the specified encoding. Default is hex.
     *        - parsed: Boolean to specify if the parsed price update should be included in the response. Default is false.
     *        - allowUnordered: Boolean to specify if unordered updates are allowed to be included in the stream. Default is false.
     *        - benchmarksOnly: Boolean to specify if only benchmark prices should be returned. Default is false.
     *        - ignoreInvalidPriceIds: Boolean to specify if invalid price IDs should be ignored instead of returning an error. Default is false.
     *
     * @returns An EventSource instance for receiving streaming updates.
     */
    async getPriceUpdatesStream(ids, options) {
        const url = new URL("v2/updates/price/stream", this.baseURL);
        ids.forEach((id) => {
            url.searchParams.append("ids[]", id);
        });
        if (options) {
            const transformedOptions = (0, utils_1.camelToSnakeCaseObject)(options);
            this.appendUrlSearchParams(url, transformedOptions);
        }
        return new eventsource_1.default(url.toString(), { headers: this.headers });
    }
    /**
     * Fetch the latest TWAP (time weighted average price) for a set of price feed IDs.
     * This endpoint can be customized by specifying the encoding type and whether the results should also return the calculated TWAP using the options object.
     * This will throw an error if there is a network problem or the price service returns a non-ok response.
     *
     * @param ids Array of hex-encoded price feed IDs for which updates are requested.
     * @param window_seconds The time window in seconds over which to calculate the TWAP, ending at the current time.
     *  For example, a value of 300 would return the most recent 5 minute TWAP. Must be greater than 0 and less than or equal to 600 seconds (10 minutes).
     * @param options Optional parameters:
     *        - encoding: Encoding type. If specified, return the TWAP binary data in the encoding specified by the encoding parameter. Default is hex.
     *        - parsed: Boolean to specify if the calculated TWAP should be included in the response. Default is false.
     *        - ignoreInvalidPriceIds: Boolean to specify if invalid price IDs should be ignored instead of returning an error. Default is false.
     *
     * @returns TwapsResponse object containing the latest TWAPs.
     */
    async getLatestTwaps(ids, window_seconds, options) {
        const url = new URL(`v2/updates/twap/${window_seconds}/latest`, this.baseURL);
        for (const id of ids) {
            url.searchParams.append("ids[]", id);
        }
        if (options) {
            const transformedOptions = (0, utils_1.camelToSnakeCaseObject)(options);
            this.appendUrlSearchParams(url, transformedOptions);
        }
        return this.httpRequest(url.toString(), zodSchemas_1.schemas.TwapsResponse);
    }
    appendUrlSearchParams(url, params) {
        Object.entries(params).forEach(([key, value]) => {
            if (value !== undefined) {
                url.searchParams.append(key, String(value));
            }
        });
    }
}
exports.HermesClient = HermesClient;
