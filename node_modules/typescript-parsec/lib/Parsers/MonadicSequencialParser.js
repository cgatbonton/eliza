"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.combine = void 0;
var ParserInterface_1 = require("./ParserInterface");
// CodegenOverloadings:End
function combine(first) {
    var continuations = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        continuations[_i - 1] = arguments[_i];
    }
    return {
        parse: function (token) {
            var firstOutput = first.parse(token);
            if (!firstOutput.successful) {
                return firstOutput;
            }
            var result = firstOutput.candidates;
            var error = firstOutput.error;
            for (var _i = 0, continuations_1 = continuations; _i < continuations_1.length; _i++) {
                var c = continuations_1[_i];
                if (result.length === 0) {
                    break;
                }
                var steps = result;
                result = [];
                for (var _a = 0, steps_1 = steps; _a < steps_1.length; _a++) {
                    var step = steps_1[_a];
                    var output = c(step.result).parse(step.nextToken);
                    error = ParserInterface_1.betterError(error, output.error);
                    if (output.successful) {
                        for (var _b = 0, _c = output.candidates; _b < _c.length; _b++) {
                            var candidate = _c[_b];
                            result.push({
                                firstToken: step.firstToken,
                                nextToken: candidate.nextToken,
                                result: candidate.result
                            });
                        }
                    }
                }
            }
            return ParserInterface_1.resultOrError(result, error, result.length !== 0);
        }
    };
}
exports.combine = combine;
//# sourceMappingURL=MonadicSequencialParser.js.map